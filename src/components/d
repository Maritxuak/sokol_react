
    
    const handleBulletClick = (element) => {
        sliderRef1.current.slideTo(parseInt(element) - 1);
        setCurrentSlideId(parseInt(element));
    };
    const [idActive, setIdActive] = React.useState(0)

    const handleIdActive = useCallback((pop) => {
        setIdActive(pop)
    }, [idActive]);

    const sliderRef1 = useRef(null);

    const handlePrevClick1 = () => {
        const prevSlideId = currentSlideId === 1 ? el.length : currentSlideId - 1;
        sliderRef1.current.slideTo(prevSlideId - 1);
        setCurrentSlideId(prevSlideId);
    };

    const handleNextClick1 = () => {
        const nextSlideId = currentSlideId === el.length ? 1 : currentSlideId + 1;
        sliderRef1.current.slideTo(nextSlideId - 1);
        setCurrentSlideId(nextSlideId);
    };


    const updatePaginationBulletClasses = (swiper) => {
        const bullets = document.querySelectorAll('.js-services-swiper-pagination-1 .swiper-pagination-bullet');
        bullets.forEach((bullet, index) => {
            if (index === swiper.activeIndex) {
                bullet.classList.add('swiper-pagination-bullet-active');
            } else {
                bullet.classList.remove('swiper-pagination-bullet-active');
            }
        });
    };

    useEffect(() => {
        const servicesLayoutSliderInit1Element = document.querySelector('.js-services-layout-slider-init-1');

        if (servicesLayoutSliderInit1Element) {
            const servicesLayoutSliderInit1 = new Swiper('.js-services-layout-slider-init-1', {
                autoHeight: true,
                slidesPerView: 1,
                spaceBetween: 0,
                loop: false,
                allowTouchMove: false,
                pagination: {
                    el: '.js-services-swiper-pagination-1',
                    type: 'bullets',
                    clickable: true,
                },

                on: {
                    slideChange: function () {
                        const activeSlide = this.slides[this.activeIndex];
                        const activeSlideIndex = activeSlide.getAttribute('serviceSlide');
                        setCurrentSlideId(activeSlideIndex);
                        updatePaginationBulletClasses(this);
                    }
                }
            });

            sliderRef1.current = servicesLayoutSliderInit1;

            const blockLeft = document.querySelector('.js-services-slider-btn-prev-1');
            const blockRight = document.querySelector('.js-services-slider-btn-next-1');

            if (blockLeft && blockRight) {
                if (!blockLeft.onclick) {
                    blockLeft.addEventListener('click', () => handlePrevClick1(sliderRef1.current));
                }
                if (!blockRight.onclick) {
                    blockRight.addEventListener('click', () => handleNextClick1(sliderRef1.current));
                }
            }

        }

        return () => {
            if (sliderRef1.current) {
                sliderRef1.current.destroy();
            }
        };
    }, []);


    const [currentSlideId, setCurrentSlideId] = useState(1);

    const handleSlideChange = (swiper) => {
        const currentSlide = el2[swiper.activeIndex];
        setCurrentSlideId(currentSlide.id);
    };

    const handlePaginationClick = (sliderRef1, id) => {
        sliderRef1.current.slideTo(id - 1);
        setCurrentSlideId(id);
    };



    const sliderRef = useRef(null);



    // slide2